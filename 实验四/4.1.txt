#include <iostream>
#include <algorithm>
using namespace std;

template <typename T>
class Stack
{
public:
    Stack(); // 栈的构造函数
    void Push(const T& item); // 往栈顶增加元素
    void Pop(); // 从非空栈的栈顶删除一个元素
    T& GetTop(); // 返回非空栈的栈顶元素的引用
    bool Empty(); // 判断栈是否为空
    int Size(); // 返回栈中元素的个数
    void ClearStack(); // 将栈清空
    ~Stack(); // 栈的析构函数
private:
    T* elem; // 保存栈中各元素的数组
    int top; // 保存栈顶的当前位置
    int max_size; // 保存elem数组的最大容量
    static const int dc = 10; // 默认容量
    void Resize(int nc); // 动态扩容函数
};

template <typename T>
Stack<T>::Stack()
    : max_size(dc), top(-1)
{
    elem = new T[dc];
}

template <typename T>
void Stack<T>::Push(const T& item)
{
    if (top >= max_size - 1) {
        Resize(max_size * 2);
    }
    elem[++top] = item;
}

template <typename T>
void Stack<T>::Pop()
{
    if (top >= 0) {
        --top;
    }
}

template <typename T>
T& Stack<T>::GetTop()
{
    return elem[top];
}

template <typename T>
bool Stack<T>::Empty()
{
    return top < 0;
}

template <typename T>
int Stack<T>::Size()
{
    return top + 1;
}

template <typename T>
void Stack<T>::ClearStack()
{
    top = -1;
}

template <typename T>
Stack<T>::~Stack()
{
    delete[] elem;
}

template <typename T>
void Stack<T>::Resize(int new_capacity)
{
    if (new_capacity <= max_size) {
        return;
    }
    T* new_elem = new T[new_capacity];
    for (int i = 0; i <= top; ++i) {
        new_elem[i] = elem[i];
    }
    delete[] elem;
    elem = new_elem;
    max_size = new_capacity;
}



int main()
{
    /*Stack<int> int_stack;
    cout << "Is the integer stack empty? " << int_stack.Empty() << endl;
    int_stack.Push(1);
    int_stack.Push(2);
    cout << "The size of the integer stack is " << int_stack.Size() << endl;
    cout << "The top element of the integer stack is " << int_stack.GetTop() << endl;
    int_stack.Pop();
    cout << "The top element of the integer stack is " << int_stack.GetTop() << endl;
    int_stack.ClearStack();
    cout << "Is the integer stack empty? " << int_stack.Empty() << endl;

    Stack<char> char_stack;
    cout << "Is the character stack empty? " << char_stack.Empty() << endl;
    char_stack.Push('a');
    char_stack.Push('b');
    cout << "The size of the character stack is " << char_stack.Size() << endl;
    cout << "The top element of the character stack is " << char_stack.GetTop() << endl;
    char_stack.Pop();
    cout << "The top element of the character stack is " << char_stack.GetTop() << endl;
    char_stack.ClearStack();
    cout << "Is the character stack empty? " << char_stack.Empty() << endl;

    return 0;*/
}